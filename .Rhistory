pca_vectors
pca_vectors
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = rownames(.)))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = rownames(.)))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = rownames(.))
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = .)
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
select("rotation")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
select(rotation)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
select(rotation)
city_conf_pca
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variables = rownames(.), .)
View(pca_vectors)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
data.frame(variables = rownames(.), .)
View(pca_vectors)
pca_vectors
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ------------------------------------------------------------
# Quantile of confirmed cases
q_conf <- city_df %>%
select(confirmed) %>%
map(quantile)
# Convert quantile to vector list
q_conf <- q_conf %>%
as.data.frame(col.names = "values") %>%
pluck("values")
# Classify confirmed cases into 4 quantile classes
city_df <- city_df %>%
mutate(class = case_when(
confirmed >= q_conf[1] & confirmed <= q_conf[2] ~ "1. None",
confirmed >= q_conf[2] & confirmed <= q_conf[3] ~ "2. Low",
confirmed >= q_conf[3] & confirmed <= q_conf[4] ~ "3. Moderate",
confirmed >= q_conf[4] & confirmed <= q_conf[5] ~ "4. High",
TRUE ~ "0"
))
# Apply PCA
city_conf_pca <- city_df %>%
select(elementary_school_count:nursing_home_count) %>%
prcomp(center = TRUE, scale. = TRUE)
# Augment the PCA with columns from before PCA
city_conf_pca_aug <- city_conf_pca %>%
broom::augment(city_df)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(., .rows = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(.rows = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(.rows = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = rownames(.))
?column_to_rownames()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames(variables = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames(variables = rownames(.), .)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames(variables = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
rownames(.)
View(city_conf_pca)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
rownames(.)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
add_rownames() %>%
as_tibble()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble::add_rownames() %>%
as_tibble()
?add_rownames()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
rownames_to_column() %>%
as_tibble()
?rownames_to_column
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation")
View(pca_vectors)
?as_tibble
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variables = NA) %>%
rownames_to_column()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variables = NA)
View(pca_vectors)
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
?rownames_to_column
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variable = NA) %>%
rownames_to_column(var = "variable")
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variable = NA) %>%
rownames_to_column(., var = "variable")
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(var = NA) %>%
rownames_to_column()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
pca_vectors
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = "variable")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = "rowname")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = "rowname")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(., rownames = "rowname")
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
?gather
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
?summarise
?count
?drop_na
pivot_wide
pivot_wider
?pivot_wider
?pivot_longer
?as.factor
?map
?broom::glance
broom:tidy
?broom:tidy
?tidy
?tidy
?as.vector
?quantile
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ---------
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/03_augment.R', echo=TRUE)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
View(city_df)
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% select(confirmed)
# Classify confirmed cases into 4 classes
max_conf <- city_df %>%
select(confirmed) %>%
max()
styler:::style_selection()
styler:::style_selection()
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
max_conf*0.25
max_conf*0
max_conf*0.25
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ------------------------------------------------------------
max_conf <- city_df %>%
select(confirmed) %>%
max()
# Classify confirmed cases into 4 classes
city_df <- city_df %>%
mutate(class = case_when(
confirmed >= max_conf * 0 & confirmed <= max_conf * 0.25 ~ "1. None",
confirmed >= max_conf * 0.25 & confirmed <= max_conf * 0.50 ~ "2. Low",
confirmed >= max_conf * 0.50 & confirmed <= max_conf * 0.75 ~ "3. Moderate",
confirmed >= max_conf * 0.75 & confirmed <= max_conf ~ "4. High",
TRUE ~ "0"
))
View(city_df)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ------------------------------------------------------------
# Quantile of confirmed cases
q_conf <- city_df %>%
select(confirmed) %>%
map(quantile)
# Convert quantile to vector list
q_conf <- q_conf %>%
as.data.frame(col.names = "values") %>%
pluck("values")
q_conf[3]
## Materials and methods
```{r out.width = "60%", fig.align='center',fig.cap= "COVID-19 dataset from kaggle" }
include_graphics('dataset.png')
```
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/09_model_city_ann.R', echo=TRUE)
?scale_colour_manual
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/07_model_patient_route.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/07_model_patient_route.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/07_model_patient_route.R', echo=TRUE)
# Detach external packages ---------------------------------------------------------------------
detach("package:maptools", unload=TRUE)
detach("package:rgdal", unload=TRUE)
detach("package:gpclib", unload=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/07_model_patient_route.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/07_model_patient_route.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/99_project_functions.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
styler:::style_selection()
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/99_project_functions.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/99_project_functions.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/99_project_functions.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/99_project_functions.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/99_project_functions.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/99_project_functions.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/10_model_most_visited.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/17_model_subset_transmission.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
# Predict clustering accuracy
clustering_pred <- city_conf_kmean_pca_aug %>%
select(class, cluster_org, cluster_pca) %>%
mutate(
cluster_org = case_when(
cluster_org == 1 ~ "3. Moderate",
cluster_org == 2 ~ "4. High",
cluster_org == 3 ~ "2. Low",
cluster_org == 4 ~ "1. None"
),
cluster_pca = case_when(
cluster_pca == 1 ~ "2. Low",
cluster_pca == 2 ~ "4. High",
cluster_pca == 3 ~ "3. Moderate",
cluster_pca == 4 ~ "1. None"
),
cluster_org_correct = case_when(
class == cluster_org ~ 1,
class != cluster_org ~ 0
),
cluster_pca_correct = case_when(
class == cluster_pca ~ 1,
class != cluster_pca ~ 0
)
) %>%
summarise(
score_org = mean(cluster_org_correct),
score_pca = mean(cluster_pca_correct)
)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
city_conf_kmean_pca_aug
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/05_model_case_type.R', echo=TRUE)
library(knitr)
library(knitr)
source(purl("R/doc/final_project_presentation.rmd"))
source(purl("R/doc/final_project_presentation.Rmd"))
source(purl("doc/final_project_presentation.Rmd"))
library(knitr)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE)
getwd()
include_graphics('case_df.png')
source(purl("doc/final_project_presentation.Rmd"))
source(purl("doc/final_project_presentation.Rmd"))
source(purl("doc/final_project_presentation.Rmd"))
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
include_graphics('../results/11_city_clustering.png')
cluster_pred <- read_tsv("../data/wrangled_cluster_pred.tsv") %>%
mutate(score_org = round(score_org*100, 1),
score_pca = round(score_pca*100, 1))
knitr::kable(cluster_pred, format="html")
include_graphics('../results/11_city_clustering.png')
cluster_pred <- read_tsv("../data/wrangled_cluster_pred.tsv") %>%
mutate(score_org = str_c(round(score_org*100, 1), "%"),
score_pca = str_c(round(score_pca*100, 1), "%"))
knitr::kable(cluster_pred, format="html")
include_graphics('../results/11_city_clustering.png')
cluster_pred <- read_tsv("../data/wrangled_cluster_pred.tsv") %>%
mutate(score_original = str_c(round(score_org*100, 1), "%"),
score_pca = str_c(round(score_pca*100, 1), "%")) %>%
knitr::kable(cluster_pred, format="html")
include_graphics('../results/11_city_clustering.png')
cluster_pred <- read_tsv("../data/wrangled_cluster_pred.tsv") %>%
mutate(score_org = str_c(round(score_org*100, 1), "%"),
score_pca = str_c(round(score_pca*100, 1), "%")) %>%
knitr::kable(cluster_pred, format="html")
include_graphics('../results/11_city_clustering.png')
cluster_pred <- read_tsv("../data/wrangled_cluster_pred.tsv") %>%
mutate(score_org = str_c(round(score_org*100, 1), "%"),
score_pca = str_c(round(score_pca*100, 1), "%")) %>%
knitr::kable(cluster_pred, format="html")
include_graphics('../results/11_city_clustering.png')
cluster_pred <- read_tsv("../data/wrangled_cluster_pred.tsv") %>%
mutate(score_org = str_c(round(score_org*100, 1), "%"),
score_pca = str_c(round(score_pca*100, 1), "%")) %>%
knitr::kable(cluster_pred, format="html")
include_graphics('../results/11_city_clustering.png')
cluster_pred <- read_tsv("../data/wrangled_cluster_pred.tsv") %>%
mutate(score_org = str_c(round(score_org*100, 1), "%"),
score_pca = str_c(round(score_pca*100, 1), "%"))
knitr::kable(cluster_pred, format="html")
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
include_graphics('../results/neural_network_viz.png')
include_graphics('neural_network_viz.png')
ann_pred <- read_tsv("../data/wrangled_ann_pred") %>%
mutate(accuracy = str_c(round(accuracy*100, 1), "%")) %>%
select(accuracy)
knitr::kable(ann_pred, format="html")
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
git status
git pull
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
