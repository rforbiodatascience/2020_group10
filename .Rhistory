mutate(
class_num = as.numeric(as.factor(class)) - 1,
class_label = class
)
# Define test size
test_f <- 0.20
# Create partion of the data
nn_dat <- nn_dat %>%
mutate(partition = sample(
x = c("train", "test"),
size = nrow(.),
replace = TRUE,
prob = c(1 - test_f, test_f)
))
# Define the training sets
x_train <- nn_dat %>%
filter(partition == "train") %>%
select(elementary_school_count:nursing_home_count) %>%
as.matrix()
y_train <- nn_dat %>%
filter(partition == "train") %>%
pull(class_num) %>%
to_categorical(4)
install.packages("keras")
install.packages("keras")
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library("tidyverse")
library("keras")
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_conf_pca_aug <- read_tsv("data/wrangled_city_pca.tsv")
# Convert classes to numeric
nn_dat <- city_conf_pca_aug %>%
mutate(class_label = as.factor(class)) %>%
mutate(
class_num = as.numeric(as.factor(class)) - 1,
class_label = class
)
# Define test size
test_f <- 0.20
# Create partion of the data
nn_dat <- nn_dat %>%
mutate(partition = sample(
x = c("train", "test"),
size = nrow(.),
replace = TRUE,
prob = c(1 - test_f, test_f)
))
# Define the training sets
x_train <- nn_dat %>%
filter(partition == "train") %>%
select(elementary_school_count:nursing_home_count) %>%
as.matrix()
y_train <- nn_dat %>%
filter(partition == "train") %>%
pull(class_num) %>%
to_categorical(4)
install_tensorflow()
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Select columns of interest for the cor heatmap
city_df <- city_df %>%
select(elementary_school_count:nursing_home_count)
# Get correlation matrix and round numbers
city_cor_matrix <- city_df %>%
cor() %>%
round(2)
# Keep only the lower triangle of matrix
city_cor_matrix <- city_cor_matrix %>%
get_lower_tri()
city_cor_df <- city_cor_matrix %>%
as.data.frame()
View(city_cor_matrix)
View(city_cor_df)
View(city_cor_matrix)
city_cor_df <- city_cor_matrix %>%
as.data.frame() %>%
mutate(var1 = factor(row.names(.), levels=row.names(.)))
View(city_cor_df)
city_cor_df <- city_cor_matrix %>%
as.data.frame() %>%
mutate(var1 = factor(row.names(.), levels=row.names(.))) %>%
gather(key = var2, value = value, -var1, na.rm = TRUE, factor_key = TRUE)
View(city_cor_df)
# Define functions ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Read the data ------------------------------------------------------------------------------
patient_df <- read_tsv("data/patient_data_augmented.tsv")
# Create a range of coordinates per city
range_coordinates <- patient_df %>%
select(., c(province_patient_route, state, longitude, latitude)) %>%
rename(x = longitude) %>%
rename(y = latitude) %>%
group_by(province_patient_route, state) %>%
summarise(min_latt = min(y), max_lonn = max(x))
View(range_coordinates)
cases_number <- patient_df %>%
select(., c(province_patient_route, state)) %>%
group_by(province_patient_route, state)
View(cases_number)
View(range_coordinates)
cases_number <- patient_df %>%
select(., c(province_patient_route, state)) %>%
group_by(province_patient_route, state) %>%
tally() %>%
as_tibble()
View(cases_number)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Select columns of interest for the cor heatmap
city_df <- city_df %>%
select(elementary_school_count:nursing_home_count)
# Get correlation matrix and round numbers
city_cor_matrix <- city_df %>%
cor() %>%
round(2)
# Keep only the lower triangle of matrix
city_cor_matrix <- city_cor_matrix %>%
get_lower_tri()
city_cor_df <- city_cor_matrix %>%
as.data.frame() %>%
mutate(var1 = factor(row.names(.), levels=row.names(.)))
View(city_df)
View(city_cor_df)
View(city_df)
# Pivot the matrix into dataframe for plotting
city_cor_df <- city_cor_matrix %>%
as.data.frame() %>%
mutate(var1 = factor(row.names(.), levels=row.names(.))) %>%
gather(key = var2, value = value, -var1, na.rm = TRUE, factor_key = TRUE)
View(city_cor_df)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Quantile of confirmed cases
q_conf <- city_df %>%
select(confirmed) %>%
map(quantile)
View(q_conf)
q_conf
# Convert quantile to vector list
q_conf <- q_conf %>%
as.data.frame(col.names = "values") %>%
pluck("values")
q_conf
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Quantile of confirmed cases
q_conf <- city_df %>%
select(confirmed) %>%
map(quantile)
# Convert quantile to vector list
q_conf <- q_conf %>%
as.data.frame(col.names = "values") %>%
pluck("values")
# Classify confirmed cases into 4 quantile classes
city_df <- city_df %>%
mutate(class = case_when(
confirmed >= q_conf[1] & confirmed <= q_conf[2] ~ "1. None",
confirmed >= q_conf[2] & confirmed <= q_conf[3] ~ "2. Low",
confirmed >= q_conf[3] & confirmed <= q_conf[4] ~ "3. Moderate",
confirmed >= q_conf[4] & confirmed <= q_conf[5] ~ "4. High",
TRUE ~ "0"
))
# Apply PCA
city_conf_pca <- city_df %>%
select(elementary_school_count:nursing_home_count) %>%
prcomp(center = TRUE, scale. = TRUE)
# Augment the PCA with columns from before PCA
city_conf_pca_aug <- city_conf_pca %>%
broom::augment(city_df)
city_conf_pca_aug
city_conf_pca
city_conf_pca <- city_conf_pca %>%
broom::tidy("pcs") %>%
mutate(percent_round = round(percent*100, 0))
city_conf_pca
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("devtools")
library("tidyverse")
library("devtools")
install_github("rstudio/keras")
library(keras)
install_keras(tensorflow = "1.13.1")
install_keras(tensorflow = "1.13.1")
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library("tidyverse")
library("keras")
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_conf_pca_aug <- read_tsv("data/wrangled_city_pca.tsv")
# Convert classes to numeric
nn_dat <- city_conf_pca_aug %>%
mutate(class_label = as.factor(class)) %>%
mutate(
class_num = as.numeric(as.factor(class)) - 1,
class_label = class
)
# Define test size
test_f <- 0.20
# Create partion of the data
nn_dat <- nn_dat %>%
mutate(partition = sample(
x = c("train", "test"),
size = nrow(.),
replace = TRUE,
prob = c(1 - test_f, test_f)
))
# Define the training sets
x_train <- nn_dat %>%
filter(partition == "train") %>%
select(elementary_school_count:nursing_home_count) %>%
as.matrix()
y_train <- nn_dat %>%
filter(partition == "train") %>%
pull(class_num) %>%
to_categorical(4)
source('/cloud/project/R/09_model_city_ann.R')
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library("tidyverse")
library("keras")
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_conf_pca_aug <- read_tsv("data/wrangled_city_pca.tsv")
View(city_conf_pca_aug)
nn_dat <- city_conf_pca_aug %>%
mutate(class_label = as.factor(class))
View(nn_dat)
nn_dat <- city_conf_pca_aug %>%
mutate(class_label = as.factor(class)) %>%
mutate(
class_num = as.numeric(as.factor(class)) - 1,
class_label = class
)
?partition
??partition
# Define test size
test_f <- 0.20
# Create partion of the data
nn_dat <- nn_dat %>%
mutate(partition = sample(
x = c("train", "test"),
size = nrow(.),
replace = TRUE,
prob = c(1 - test_f, test_f)
))
# Define the training sets
x_train <- nn_dat %>%
filter(partition == "train") %>%
select(elementary_school_count:nursing_home_count) %>%
as.matrix()
y_train <- nn_dat %>%
filter(partition == "train") %>%
pull(class_num) %>%
to_categorical(4)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(patchwork)
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_conf_pca_aug <- read_tsv("data/wrangled_city_pca.tsv")
city_conf_pca_explained <- read_tsv("data/wrangled_city_pca_explained.tsv")
View(city_conf_pca_explained)
# Wrangle data ------------------------------------------------------------
set.seed(5)
center_clusters <- 4
# K-means clustering of original data
city_conf_pca_orig <- city_conf_pca_aug %>%
select(elementary_school_count:nursing_home_count) %>%
kmeans(centers = center_clusters)
View(city_conf_pca_aug)
View(city_conf_pca_orig)
city_conf_kmean_orig_aug <- city_conf_pca_orig %>%
broom::augment(city_conf_pca_aug) %>%
rename(cluster_org = .cluster)
View(city_conf_kmean_orig_aug)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
time_df <- read_tsv("data/time_data_augmented.tsv")
# Stratify confirmed and deceased by age
time_age_disease <- time_df %>%
select(confirmed_time_age, deceased_time_age, age) %>%
drop_na() %>%
group_by(age) %>%
nest()
View(time_age_disease)
View(time_age_disease[[2]][[1]])
# Apply linear model to the nested table
time_age_disease <- time_age_disease %>%
mutate(model = map(data, deceased_model))
# Get model stats and unnest
time_age_disease <- time_age_disease %>%
mutate(result = map(model, broom::tidy, conf.int = TRUE)) %>%
unnest(result)
# Keep only slope estimate and create estimate percentage column
time_age_disease <- time_age_disease %>%
filter(term != "(Intercept)") %>%
mutate(estimate_percentage = str_c(round(estimate * 100, 2), "%"))
deceased_by_confirmed_plot <- time_age_disease %>%
ggplot(aes(x=age, y=estimate, label = estimate_percentage, fill = age)) +
geom_bar(stat="identity") +
theme_bw() +
geom_label(nudge_y = 0.02) +
geom_errorbar(aes(ymin=conf.low, ymax=conf.high), width=.2,
position=position_dodge(.9))+
theme(plot.title = element_text(size = 18),
legend.position = "none") +
labs(
title = "Case fatality rate by age",
x = "age group",
y = "case fatality rate in percent",
caption = "Data from Korea Centers for Disease Control & Prevention (2020)"
)
ggsave(
filename = "results/12_age_deceased_ratio.png",
plot = deceased_by_confirmed_plot,
width = 8,
height = 8,
)
# Deselect nested columns
time_age_disease <- time_age_disease %>%
select(-c(data, model, term))
View(time_age_disease)
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Run scripts
# ------------------------------------------------------------------------------
options(scipen = 999)
source(file = "R/01_load.R")
source(file = "R/02_clean.R")
source(file = "R/03_augment.R")
# Clear workspace -------------------------------------------------------------------------------
rm(list = ls())
# Load libraries --------------------------------------------------------------------------------
library(tidyverse)
library(lubridate)
# Define functions ------------------------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Read the data ---------------------------------------------------------------------------------
case_df <- read_tsv("data/case_data_clean.tsv")
patient_info_df <- read_tsv("data/patient_info_data_clean.tsv")
patient_route_df <- read_tsv("data/patient_route_data_clean.tsv")
time_df <- read_tsv("data/time_data_clean.tsv")
time_age_df <- read_tsv("data/time_age_data_clean.tsv")
time_gender_df <- read_tsv("data/time_gender_data_clean.tsv")
time_province_df <- read_tsv("data/time_province_data_clean.tsv")
search_trend_df <- read_tsv("data/search_trend_data_clean.tsv")
city_df <- read_tsv("data/city_data_clean.tsv")
# Classify names on infection case
case_df <- case_df %>%
mutate(case_type = case_when(
str_detect(infection_case, "Hospital") ~ "hospital",
str_detect(infection_case, "Church") ~ "church",
str_detect(infection_case, "overseas") ~ "overseas",
str_detect(infection_case, "Pilgrimage") ~ "overseas",
str_detect(infection_case, "patient") ~ "contact with patient",
str_detect(infection_case, "Call") ~ "call center",
str_detect(infection_case, "Nursing") ~ "nursing home",
str_detect(infection_case, "gym") ~ "gym",
str_detect(infection_case, "Lab") ~ "lab",
str_detect(infection_case, "Community Center") ~ "community center",
str_detect(infection_case, "other") ~ "other",
)) %>%
mutate(case_type = replace_na(case_type, "other"))
# Remove unnecessary columns
case_df <- case_df %>%
select(confirmed, case_type)
# Remove unnecessary columns
patient_df <- patient_info_df %>%
select(-c(global_num, country, symptom_onset_date, sex))
# Joining the the two patient data frames
patient_df <- patient_df %>%
full_join(patient_route_df, by = "patient_id", suffix = c("_patient_info", "_patient_route"))
# Add age column and one more column to subset the ages into age_group
patient_df <- patient_df %>%
mutate(age = year(today()) - birth_year) %>%
mutate(age_group = case_when(
age < 10 ~ "0s",
age < 20 ~ "10s",
age < 30 ~ "20s",
age < 40 ~ "30s",
age < 50 ~ "40s",
age < 60 ~ "50s",
age < 70 ~ "60s",
age < 80 ~ "70s",
age < 90 ~ "80s",
age < 100 ~ "90s",
age >= 100 ~ "100s"
)) %>%
select(-birth_year)
# Combine 'released_date' and 'deceased_date' to state column
patient_df <- patient_df %>%
unite("state_date", released_date : deceased_date, remove = TRUE)
# Unite concatenates NA and dates. NA are removed and corrected
patient_df <- patient_df %>%
mutate(state_date = str_replace_all(state_date, "[_NA]", "")) %>%
mutate(state_date = case_when(
state_date == "" ~ as.Date(NA),
TRUE ~ as.Date(state_date)
))
# Full join time series data by date. Suffix are added for col collisions
time_df <- time_df %>%
full_join(time_age_df, by = "date", suffix = c("", "_time_age")) %>%
full_join(time_gender_df, by = "date", suffix = c("", "_time_gender")) %>%
full_join(time_province_df, by = "date", suffix = c("", "_time_province")) %>%
full_join(search_trend_df, by = "date")
# Removing unwanted columns
time_df <- time_df %>%
select(-c(
time,
time_time_age,
time_time_gender,
time_time_province,
released,
province,
confirmed_time_province,
released_time_province,
deceased_time_province,
cold,
flu,
pneumonia
))
# Removing unwanted columns
city_df <- city_df %>%
select(-c(code, latitude, longitude, province))
# Get city confirmed cases using patient dataframe
confirmed_cases <- patient_df %>%
group_by(city_patient_info) %>%
distinct(patient_id, .keep_all = TRUE) %>%
rename("city" = city_patient_info) %>%
summarise(confirmed = length(confirmed_date))
# Join city confirmed cases to city regional data
city_df <- confirmed_cases %>%
full_join(city_df, by = "city") %>%
mutate(confirmed = replace_na(confirmed, 0)) %>%
drop_na()
write_tsv(case_df, "data/case_data_augmented.tsv")
write_tsv(patient_df, "data/patient_data_augmented.tsv")
write_tsv(time_df, "data/time_data_augmented.tsv")
write_tsv(city_df, "data/city_data_augmented.tsv")
source('/cloud/project/R/03_augment.R')
# Clear workspace
# ------------------------------------------------------------------------------
rm(list = ls())
# Run scripts
# ------------------------------------------------------------------------------
options(scipen = 999)
source(file = "R/01_load.R")
source(file = "R/02_clean.R")
source(file = "R/03_augment.R")
source(file = "R/05_model_case_type.R")
source(file = "R/06_model_cor.R")
source(file = "R/07_model_patient_route.R")
source(file = "R/08_model_city_pca.R")
source(file = "R/10_model_most_visited.R")
source(file = "R/11_model_city_clustering.R")
source(file = "R/12_model_case_fatality_age.R")
source(file = "R/13_model_disease_progress.R")
source(file = "R/14_model_exposure.R")
source(file = "R/15_model_searchtrends.R")
source(file = "R/16_model_transmission.R")
source(file = "R/17_model_subset_transmission.R")
library(knitr)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE)
include_graphics('../results/08_city_pca.png')
