source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
View(city_df)
as.vector()
# Create variance explained vector
var_explained_vector <- city_conf_pca %>%
pluck("percent") %>%
as.vector()
var_explained_vector
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
View(city_df)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/03_augment.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/02_clean.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/02_clean.R', echo=TRUE)
View(city_df)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/03_augment.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Create variance explained vector
var_explained_vector <- city_conf_pca %>%
mutate(percent = round(percent*100, 0))
var_explained_vector
var_explained_vector
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(patchwork)
# library(devtools)
# install_github("thomasp85/patchwork")
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_conf_pca_aug <- read_tsv("data/wrangled_city_pca.tsv")
View(city_conf_pca_aug)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
View(city_conf_pca)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(patchwork)
# library(devtools)
# install_github("thomasp85/patchwork")
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_conf_pca_aug <- read_tsv("data/wrangled_city_pca.tsv")
city_conf_pca_explained <- read_tsv("data/wrangled_city_pca_explained.tsv")
View(city_conf_pca_explained)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/11_model_city_clustering.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/13_model_disease_progress.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/03_augment.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
r_files <- list.files(path = "R/*.R", full.names = TRUE)
r_files
r_files
r_files <- list.files(path = "R/*.R", full.names = TRUE)
r_files <- list.files(path = "R/", full.names = TRUE)
r_files <- list.files(path = "R/*.R", full.names = TRUE)
r_files <- list.files(path = "R/*.r", full.names = TRUE)
r_files <- list.files(path = "R/", full.names = TRUE)
r_files <- list.files(path = "R/", full.names = TRUE)
r_files %>% arrange()
r_files %>% tibble()
r_files %>% tibble() %>% arrange()
r_files %>%
tibble() %>%
arrange() %>%
map(source, file = .)
r_files %>% map(source)
# Load table files and set filename to snake case format
dataset_tables <- dataset_files %>%
setNames(nm = snake_case(.)) %>%
map(read_csv)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/01_load.R', echo=TRUE)
git status
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/01_load.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/02_clean.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/03_augment.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
View(pca_vectors)
View(pca_vectors)
?tibble
?as.tibble
tibble()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble()
pca_vectors
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tidy()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
broom::tidy()
pca_vectors
pca_vectors
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation")
pca_vectors
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ------------------------------------------------------------
# Quantile of confirmed cases
q_conf <- city_df %>%
select(confirmed) %>%
map(quantile)
# Convert quantile to vector list
q_conf <- q_conf %>%
as.data.frame(col.names = "values") %>%
pluck("values")
# Classify confirmed cases into 4 quantile classes
city_df <- city_df %>%
mutate(class = case_when(
confirmed >= q_conf[1] & confirmed <= q_conf[2] ~ "1. None",
confirmed >= q_conf[2] & confirmed <= q_conf[3] ~ "2. Low",
confirmed >= q_conf[3] & confirmed <= q_conf[4] ~ "3. Moderate",
confirmed >= q_conf[4] & confirmed <= q_conf[5] ~ "4. High",
TRUE ~ "0"
))
# Apply PCA
city_conf_pca <- city_df %>%
select(elementary_school_count:nursing_home_count) %>%
prcomp(center = TRUE, scale. = TRUE)
# Augment the PCA with columns from before PCA
city_conf_pca_aug <- city_conf_pca %>%
broom::augment(city_df)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation")
pca_vectors
pca_vectors
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = rownames(.)))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = rownames(.)))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = rownames(.))
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble(variables = .)
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
select("rotation")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
select(rotation)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
select(rotation)
city_conf_pca
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variables = rownames(.), .)
View(pca_vectors)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
data.frame(variables = rownames(.), .)
View(pca_vectors)
pca_vectors
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ------------------------------------------------------------
# Quantile of confirmed cases
q_conf <- city_df %>%
select(confirmed) %>%
map(quantile)
# Convert quantile to vector list
q_conf <- q_conf %>%
as.data.frame(col.names = "values") %>%
pluck("values")
# Classify confirmed cases into 4 quantile classes
city_df <- city_df %>%
mutate(class = case_when(
confirmed >= q_conf[1] & confirmed <= q_conf[2] ~ "1. None",
confirmed >= q_conf[2] & confirmed <= q_conf[3] ~ "2. Low",
confirmed >= q_conf[3] & confirmed <= q_conf[4] ~ "3. Moderate",
confirmed >= q_conf[4] & confirmed <= q_conf[5] ~ "4. High",
TRUE ~ "0"
))
# Apply PCA
city_conf_pca <- city_df %>%
select(elementary_school_count:nursing_home_count) %>%
prcomp(center = TRUE, scale. = TRUE)
# Augment the PCA with columns from before PCA
city_conf_pca_aug <- city_conf_pca %>%
broom::augment(city_df)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(., .rows = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(.rows = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(.rows = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = rownames(.))
?column_to_rownames()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames(variables = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames(variables = rownames(.), .)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
column_to_rownames(variables = rownames(.))
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble() %>%
rownames(.)
View(city_conf_pca)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
rownames(.)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
add_rownames() %>%
as_tibble()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
tibble::add_rownames() %>%
as_tibble()
?add_rownames()
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
rownames_to_column() %>%
as_tibble()
?rownames_to_column
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation")
View(pca_vectors)
?as_tibble
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variables = NA) %>%
rownames_to_column()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variables = NA)
View(pca_vectors)
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
?rownames_to_column
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variable = NA) %>%
rownames_to_column(var = "variable")
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(variable = NA) %>%
rownames_to_column(., var = "variable")
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(var = NA) %>%
rownames_to_column()
View(pca_vectors)
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = NA) %>%
rownames_to_column()
View(pca_vectors)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
pca_vectors
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = "variable")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = "rowname")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(rownames = "rowname")
# Get PCA eigenvectors
pca_vectors <- city_conf_pca %>%
pluck("rotation") %>%
as_tibble(., rownames = "rowname")
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
?gather
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/00_doit.R', echo=TRUE)
?summarise
?count
?drop_na
pivot_wide
pivot_wider
?pivot_wider
?pivot_longer
?as.factor
?map
?broom::glance
broom:tidy
?broom:tidy
?tidy
?tidy
?as.vector
?quantile
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ---------
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/03_augment.R', echo=TRUE)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
View(city_df)
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% max(confirmed)
# Classify confirmed cases into 4 classes
max_conf <- city_df %>% select(confirmed)
# Classify confirmed cases into 4 classes
max_conf <- city_df %>%
select(confirmed) %>%
max()
styler:::style_selection()
styler:::style_selection()
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
max_conf*0.25
max_conf*0
max_conf*0.25
source('~/Desktop/R for bio data scientists/Project/2020_group10/R/08_model_city_pca.R', echo=TRUE)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ------------------------------------------------------------
max_conf <- city_df %>%
select(confirmed) %>%
max()
# Classify confirmed cases into 4 classes
city_df <- city_df %>%
mutate(class = case_when(
confirmed >= max_conf * 0 & confirmed <= max_conf * 0.25 ~ "1. None",
confirmed >= max_conf * 0.25 & confirmed <= max_conf * 0.50 ~ "2. Low",
confirmed >= max_conf * 0.50 & confirmed <= max_conf * 0.75 ~ "3. Moderate",
confirmed >= max_conf * 0.75 & confirmed <= max_conf ~ "4. High",
TRUE ~ "0"
))
View(city_df)
# Clear workspace ---------------------------------------------------------------
rm(list = ls())
# Load libraries ---------------------------------------------------------------
library(tidyverse)
library(ggrepel) # Non-overlapping ggplot labels
library(patchwork) # Combining plots
# Define functions ---------------------------------------------------------------
source(file = "R/99_project_functions.R")
# Load data ---------------------------------------------------------------
city_df <- read_tsv("data/city_data_augmented.tsv")
# Wrangle data ------------------------------------------------------------
# Quantile of confirmed cases
q_conf <- city_df %>%
select(confirmed) %>%
map(quantile)
# Convert quantile to vector list
q_conf <- q_conf %>%
as.data.frame(col.names = "values") %>%
pluck("values")
q_conf[3]
